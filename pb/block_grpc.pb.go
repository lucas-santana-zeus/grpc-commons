// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: commons/proto/block.proto

package block

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlocksClient is the client API for Blocks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlocksClient interface {
	GetBlockById(ctx context.Context, in *RequestID, opts ...grpc.CallOption) (*ResponseBlock, error)
}

type blocksClient struct {
	cc grpc.ClientConnInterface
}

func NewBlocksClient(cc grpc.ClientConnInterface) BlocksClient {
	return &blocksClient{cc}
}

func (c *blocksClient) GetBlockById(ctx context.Context, in *RequestID, opts ...grpc.CallOption) (*ResponseBlock, error) {
	out := new(ResponseBlock)
	err := c.cc.Invoke(ctx, "/Blocks/GetBlockById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlocksServer is the server API for Blocks service.
// All implementations must embed UnimplementedBlocksServer
// for forward compatibility
type BlocksServer interface {
	GetBlockById(context.Context, *RequestID) (*ResponseBlock, error)
	mustEmbedUnimplementedBlocksServer()
}

// UnimplementedBlocksServer must be embedded to have forward compatible implementations.
type UnimplementedBlocksServer struct {
}

func (UnimplementedBlocksServer) GetBlockById(context.Context, *RequestID) (*ResponseBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockById not implemented")
}
func (UnimplementedBlocksServer) mustEmbedUnimplementedBlocksServer() {}

// UnsafeBlocksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlocksServer will
// result in compilation errors.
type UnsafeBlocksServer interface {
	mustEmbedUnimplementedBlocksServer()
}

func RegisterBlocksServer(s grpc.ServiceRegistrar, srv BlocksServer) {
	s.RegisterService(&Blocks_ServiceDesc, srv)
}

func _Blocks_GetBlockById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlocksServer).GetBlockById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blocks/GetBlockById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlocksServer).GetBlockById(ctx, req.(*RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

// Blocks_ServiceDesc is the grpc.ServiceDesc for Blocks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blocks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Blocks",
	HandlerType: (*BlocksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockById",
			Handler:    _Blocks_GetBlockById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commons/proto/block.proto",
}
